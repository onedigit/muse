/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sirolf2009.muse.core.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Graph extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 477386835551739508L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Graph\",\"namespace\":\"com.sirolf2009.muse.core.model\",\"fields\":[{\"name\":\"ID\",\"type\":\"string\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"mapping\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Edge\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]}}},{\"name\":\"children\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Node\",\"fields\":[{\"name\":\"ID\",\"type\":\"string\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"children\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Graph> ENCODER =
      new BinaryMessageEncoder<Graph>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Graph> DECODER =
      new BinaryMessageDecoder<Graph>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Graph> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Graph> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Graph>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Graph to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Graph from a ByteBuffer. */
  public static Graph fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ID;
  @Deprecated public java.lang.CharSequence Name;
  @Deprecated public java.util.List<com.sirolf2009.muse.core.model.Edge> mapping;
  @Deprecated public java.util.List<com.sirolf2009.muse.core.model.Node> children;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Graph() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param Name The new value for Name
   * @param mapping The new value for mapping
   * @param children The new value for children
   */
  public Graph(java.lang.CharSequence ID, java.lang.CharSequence Name, java.util.List<com.sirolf2009.muse.core.model.Edge> mapping, java.util.List<com.sirolf2009.muse.core.model.Node> children) {
    this.ID = ID;
    this.Name = Name;
    this.mapping = mapping;
    this.children = children;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return Name;
    case 2: return mapping;
    case 3: return children;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.CharSequence)value$; break;
    case 1: Name = (java.lang.CharSequence)value$; break;
    case 2: mapping = (java.util.List<com.sirolf2009.muse.core.model.Edge>)value$; break;
    case 3: children = (java.util.List<com.sirolf2009.muse.core.model.Node>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.CharSequence getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.CharSequence value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.CharSequence getName() {
    return Name;
  }

  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'mapping' field.
   * @return The value of the 'mapping' field.
   */
  public java.util.List<com.sirolf2009.muse.core.model.Edge> getMapping() {
    return mapping;
  }

  /**
   * Sets the value of the 'mapping' field.
   * @param value the value to set.
   */
  public void setMapping(java.util.List<com.sirolf2009.muse.core.model.Edge> value) {
    this.mapping = value;
  }

  /**
   * Gets the value of the 'children' field.
   * @return The value of the 'children' field.
   */
  public java.util.List<com.sirolf2009.muse.core.model.Node> getChildren() {
    return children;
  }

  /**
   * Sets the value of the 'children' field.
   * @param value the value to set.
   */
  public void setChildren(java.util.List<com.sirolf2009.muse.core.model.Node> value) {
    this.children = value;
  }

  /**
   * Creates a new Graph RecordBuilder.
   * @return A new Graph RecordBuilder
   */
  public static com.sirolf2009.muse.core.model.Graph.Builder newBuilder() {
    return new com.sirolf2009.muse.core.model.Graph.Builder();
  }

  /**
   * Creates a new Graph RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Graph RecordBuilder
   */
  public static com.sirolf2009.muse.core.model.Graph.Builder newBuilder(com.sirolf2009.muse.core.model.Graph.Builder other) {
    return new com.sirolf2009.muse.core.model.Graph.Builder(other);
  }

  /**
   * Creates a new Graph RecordBuilder by copying an existing Graph instance.
   * @param other The existing instance to copy.
   * @return A new Graph RecordBuilder
   */
  public static com.sirolf2009.muse.core.model.Graph.Builder newBuilder(com.sirolf2009.muse.core.model.Graph other) {
    return new com.sirolf2009.muse.core.model.Graph.Builder(other);
  }

  /**
   * RecordBuilder for Graph instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Graph>
    implements org.apache.avro.data.RecordBuilder<Graph> {

    private java.lang.CharSequence ID;
    private java.lang.CharSequence Name;
    private java.util.List<com.sirolf2009.muse.core.model.Edge> mapping;
    private java.util.List<com.sirolf2009.muse.core.model.Node> children;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sirolf2009.muse.core.model.Graph.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mapping)) {
        this.mapping = data().deepCopy(fields()[2].schema(), other.mapping);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.children)) {
        this.children = data().deepCopy(fields()[3].schema(), other.children);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Graph instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sirolf2009.muse.core.model.Graph other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mapping)) {
        this.mapping = data().deepCopy(fields()[2].schema(), other.mapping);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.children)) {
        this.children = data().deepCopy(fields()[3].schema(), other.children);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.CharSequence getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder setID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder clearID() {
      ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }

    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder clearName() {
      Name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mapping' field.
      * @return The value.
      */
    public java.util.List<com.sirolf2009.muse.core.model.Edge> getMapping() {
      return mapping;
    }

    /**
      * Sets the value of the 'mapping' field.
      * @param value The value of 'mapping'.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder setMapping(java.util.List<com.sirolf2009.muse.core.model.Edge> value) {
      validate(fields()[2], value);
      this.mapping = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mapping' field has been set.
      * @return True if the 'mapping' field has been set, false otherwise.
      */
    public boolean hasMapping() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mapping' field.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder clearMapping() {
      mapping = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'children' field.
      * @return The value.
      */
    public java.util.List<com.sirolf2009.muse.core.model.Node> getChildren() {
      return children;
    }

    /**
      * Sets the value of the 'children' field.
      * @param value The value of 'children'.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder setChildren(java.util.List<com.sirolf2009.muse.core.model.Node> value) {
      validate(fields()[3], value);
      this.children = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'children' field has been set.
      * @return True if the 'children' field has been set, false otherwise.
      */
    public boolean hasChildren() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'children' field.
      * @return This builder.
      */
    public com.sirolf2009.muse.core.model.Graph.Builder clearChildren() {
      children = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Graph build() {
      try {
        Graph record = new Graph();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Name = fieldSetFlags()[1] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.mapping = fieldSetFlags()[2] ? this.mapping : (java.util.List<com.sirolf2009.muse.core.model.Edge>) defaultValue(fields()[2]);
        record.children = fieldSetFlags()[3] ? this.children : (java.util.List<com.sirolf2009.muse.core.model.Node>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Graph>
    WRITER$ = (org.apache.avro.io.DatumWriter<Graph>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Graph>
    READER$ = (org.apache.avro.io.DatumReader<Graph>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
